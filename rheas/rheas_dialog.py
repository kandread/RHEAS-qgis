# -*- coding: utf-8 -*-
"""
/***************************************************************************
 rheasDialog
                                 A QGIS plugin
 Processes RHEAS simulations.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Kostas Andreadis
        email                : kandread@jpl.nasa.gov
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import psycopg2 as pg

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtCore import pyqtSlot

from qgis.core import QgsRasterLayer, QgsProject, QgsContrastEnhancement

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'rheas_dialog_base.ui'))


class rheasDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(rheasDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.schema.currentIndexChanged.connect(self.refreshTables)
        self.render.clicked.connect(self.loadRaster)
        self.addSchemas()
        self.addTables()

    def addSchemas(self):
        """Add available schemas from database."""
        db = pg.connect(dbname="rheas", host="localhost", port=5432, user="rheas", password="docker")
        cur = db.cursor()
        sql = "select schema_name from information_schema.schemata"
        cur.execute(sql)
        results = cur.fetchall()
        for r in results:
            name = r[0]
            if not name.startswith("pg_"):
                self.schema.addItem(name)
        cur.close()
        db.close()

    @pyqtSlot()
    def refreshTables(self):
        """Refresh list of tables when selected schema changes."""
        self.table.clear()
        self.addTables()

    @pyqtSlot()
    def loadRaster(self):
        """Load rasters when button is clicked."""
        schema = self.schema.itemText(self.schema.currentIndex())
        table = self.table.itemText(self.table.currentIndex())
        connString = "PG: dbname=rheas host=localhost user=rheas password=docker port=5432 mode=2 schema={0} column=rast table={1}".format(schema, table)
        layer = QgsRasterLayer(connString, "{0}.{1}".format(schema, table))
        if layer.isValid():
            layer.setContrastEnhancement(QgsContrastEnhancement.StretchToMinimumMaximum)
        QgsProject.instance().addMapLayer(layer)

    def addTables(self):
        """Add available tables contained in selected schema."""
        db = pg.connect(dbname="rheas", host="localhost", port=5432, user="rheas", password="docker")
        cur = db.cursor()
        idx = self.schema.currentIndex()
        schema = self.schema.itemText(idx)
        sql = "select table_name from information_schema.tables where table_schema='{0}'".format(schema)
        cur.execute(sql)
        results = cur.fetchall()
        for r in results:
            name = r[0]
            self.table.addItem(name)
        cur.close()
        db.close()
